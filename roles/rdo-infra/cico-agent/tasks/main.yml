---
#   Copyright Red Hat, Inc. All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain
#   a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.
#

- name: Install base packages
  package:
    name: "{{ cico_agent_packages }}"
    state: installed

- name: Install python3-virtualenv from epel
  package:
    name: python3-virtualenv
    state: installed
    enablerepo: epel

- name: Install pip
  easy_install:
    name: pip
    state: present

- name: Install tox
  pip:
    name: tox
    state: present

- name: Install cicoclient
  pip:
    name: python-cicoclient
    state: present

- name: Install git-review
  pip:
    name: git-review
    state: present

- name: Create jenkins user
  user:
    name: jenkins
    state: present

- name: Create rdo-monitoring user
  user:
    name: rdo-monitoring
    state: present

- name: Set up authorized_keys for rdo-monitoring user
  authorized_key:
    user: rdo-monitoring
    key: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHj3R7JGtLkSD9h+E6JNHGdZ+SStJx+wyQsE7DK41t+Au7mfTJb12zjxBO4OwzAJbVnudN86BPYI0aHuY7ZpZ8+yitcFOBxQdczcGNistIaOHNb7bp0aPpVTYkHEYo3IlsDgPYcMVsvwOpIIDfi8wSQo3p4FNTtOc9ulAeQ7UUl4uId7ILLGzpDhkRrb+hYetJw/e3Xkqz6BW/VFbw6Tb8DdgMGhNVflQNlPz1HB60zKxeoeRkrLg3lMO/LuFHr48MtWuQ4LR13fq/tw3XgzHIBU2LL107wTtZs3KqxdqEcs9+7gAaNtT9+rbMoQvF0E9viZn+vjHOAbfxgXUEsFt7 .ssh/id_rsa'

- name: Setup passwordless sudo for rdo-monitoring user
  lineinfile:
    dest: "/etc/sudoers.d/91-rdo-monitoring"
    create: "yes"
    mode: "0440"
    owner: "root"
    group: "root"
    regexp: "^rdo-monitoring"
    line: "rdo-monitoring ALL=(ALL) NOPASSWD: ALL"
    validate: "/usr/sbin/visudo -cf %s"

- name: Set up OpenStack cloud configuration directory
  file:
    path: /home/jenkins/.config/openstack
    state: directory
    owner: jenkins
    group: jenkins
    recurse: yes

- name: Set up OpenStack cloud configuration file
  template:
    src: clouds.yaml.j2
    dest: /home/jenkins/.config/openstack/clouds.yaml
    owner: jenkins
    group: jenkins
    mode: 0640

- name: Fetch agent.jar from Jenkins server
  get_url:
    url: "{{ cico_jenkins_master_url }}/jnlpJars/agent.jar"
    dest: /home/jenkins/agent.jar
    mode: 0640
    owner: jenkins
    group: jenkins

- name: Add cico API key to /etc/profile
  lineinfile:
    dest: "/etc/profile"
    regexp: "^export CICO_API_KEY.*"
    line: "export CICO_API_KEY={{ cico_api_key }}"
    mode: "0644"
    owner: "root"
    group: "root"

- name: Add rsync password to /etc/profile
  lineinfile:
    dest: "/etc/profile"
    regexp: "^export RSYNC_PASSWORD.*"
    line: "export RSYNC_PASSWORD={{ cico_rsync_passwd }}"
    mode: "0644"
    owner: "root"
    group: "root"

- name: Add cico API key to /home/jenkins/.bashrc
  lineinfile:
    dest: "/home/jenkins/.bashrc"
    regexp: "^export CICO_API_KEY.*"
    line: "export CICO_API_KEY={{ cico_api_key }}"
    mode: "0644"
    owner: "jenkins"
    group: "jenkins"

- name: Add rsync password to /home/jenkins/.bashrc
  lineinfile:
    dest: "/home/jenkins/.bashrc"
    regexp: "^export RSYNC_PASSWORD.*"
    line: "export RSYNC_PASSWORD={{ cico_rsync_passwd }}"
    mode: "0644"
    owner: "jenkins"
    group: "jenkins"

- name: Add RDO Registry token to /home/jenkins/.bashrc
  lineinfile:
    dest: "/home/jenkins/.bashrc"
    regexp: "^export RDO_REGISTRY_TOKEN.*"
    line: "export RDO_REGISTRY_TOKEN={{ cico_rdoregistry_token }}"
    mode: "0644"
    owner: "jenkins"
    group: "jenkins"

- name: Create git email configuration for jenkins user
  git_config:
    name: user.email
    scope: global
    value: rdo-ci@ci.centos.org
  become: yes
  become_user: jenkins

- name: Create git name configuration for jenkins user
  git_config:
    name: user.name
    scope: global
    value: rdo-ci
  become: yes
  become_user: jenkins

- name: Create .ssh directory for jenkins user
  file:
    path: /home/jenkins/.ssh
    state: directory
    owner: jenkins
    group: jenkins
    mode: "0700"

- name: Create id_rsa SSH key
  copy:
    content: "{{ cico_id_rsa_key }}"
    dest: /home/jenkins/.ssh/id_rsa
    owner: jenkins
    group: jenkins
    mode: 0600

- name: Create rhos-ci SSH key
  copy:
    content: "{{ cico_rhos_ci_key }}"
    dest: /home/jenkins/.ssh/rhos-ci
    owner: jenkins
    group: jenkins
    mode: 0600

- name: Create cron job to start agent on reboot
  cron:
    name: "Start jenkins agent on reboot"
    special_time: reboot
    user: jenkins
    job: "(. ~/.bashrc; nohup java -jar agent.jar -jnlpUrl {{ cico_jenkins_master_url }}/computer/{{ cico_node_hostname }}/slave-agent.jnlp -secret {{ cico_node_secret }} >/home/jenkins/jenkins-agent.log &)"

- name: Create cron job to clean up old workspaces
  cron:
    name: "Clean up old workspaces every 24hrs"
    user: jenkins
    minute: "0"
    hour: "0"
    job: 'find /home/jenkins/workspace/ -maxdepth 1 -type d -mtime +1 -exec rm -rf {} \;'

- name: Create cron job to start agent when it fails
  cron:
    name: "Start jenkins agent on fail"
    minute: '*/5'
    user: jenkins
    job: "ps -fu jenkins |grep java | grep -v grep > /dev/null || (. ~/.bashrc; nohup java -jar agent.jar -jnlpUrl {{ cico_jenkins_master_url }}/computer/{{ cico_node_hostname }}/slave-agent.jnlp -secret {{ cico_node_secret }} >/home/jenkins/jenkins-agent.log &)"

- name: Cleanup old tox env dir
  cron:
    name: Remove old tox directories
    hour: 3
    minute: 0
    user: jenkins
    job: "find /home/jenkins/ -type d -name '.tox' -mtime +1 -execdir rm -r '{}' + ;"
